# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountDashboardControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_time_transaction_summary_using_get(self, **kwargs):  # noqa: E501
        """Get all-time transaction summary for current client  # noqa: E501

        Returns transaction summary model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_time_transaction_summary_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TransactionSummaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_time_transaction_summary_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_time_transaction_summary_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_time_transaction_summary_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all-time transaction summary for current client  # noqa: E501

        Returns transaction summary model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_time_transaction_summary_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TransactionSummaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_time_transaction_summary_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/all-time-transaction-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSummaryModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_expected_cash_flows_for_period_using_post(self, **kwargs):  # noqa: E501
        """Get the cash flows expected by the current client for the next four weeks (28 days)  # noqa: E501

        Returns list of daily expected cash flow models, which include the principal, interest and total for each date  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_expected_cash_flows_for_period_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DailyCashFlowModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_expected_cash_flows_for_period_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_expected_cash_flows_for_period_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_expected_cash_flows_for_period_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get the cash flows expected by the current client for the next four weeks (28 days)  # noqa: E501

        Returns list of daily expected cash flow models, which include the principal, interest and total for each date  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_expected_cash_flows_for_period_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DailyCashFlowModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_expected_cash_flows_for_period_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/expected-cash-flows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DailyCashFlowModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_funds_in_transit_summary_by_loan_originator_using_post(self, **kwargs):  # noqa: E501
        """Get funds in transit summary by loan originator for current client  # noqa: E501

        Returns list of funds in transit info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_funds_in_transit_summary_by_loan_originator_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[FitInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_funds_in_transit_summary_by_loan_originator_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_funds_in_transit_summary_by_loan_originator_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_funds_in_transit_summary_by_loan_originator_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get funds in transit summary by loan originator for current client  # noqa: E501

        Returns list of funds in transit info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_funds_in_transit_summary_by_loan_originator_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[FitInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_funds_in_transit_summary_by_loan_originator_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/fit-summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FitInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investment_summary_by_country_using_post(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by country for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_country_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investment_summary_by_country_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investment_summary_by_country_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_investment_summary_by_country_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by country for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_country_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investment_summary_by_country_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_investment_summary_by_country_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/investment-summary-by-country', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CategorizedInvestmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investment_summary_by_interest_using_post(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by interest for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_interest_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investment_summary_by_interest_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investment_summary_by_interest_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_investment_summary_by_interest_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by interest for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_interest_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investment_summary_by_interest_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_investment_summary_by_interest_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/investment-summary-by-interest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CategorizedInvestmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investment_summary_by_loan_originator_using_post(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by loan originator for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_loan_originator_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investment_summary_by_loan_originator_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investment_summary_by_loan_originator_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_investment_summary_by_loan_originator_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by loan originator for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_loan_originator_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investment_summary_by_loan_originator_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_investment_summary_by_loan_originator_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/investment-summary-by-loan-originator', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CategorizedInvestmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investment_summary_by_loan_status_using_post(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by loan status for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_loan_status_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investment_summary_by_loan_status_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investment_summary_by_loan_status_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_investment_summary_by_loan_status_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by loan status for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_loan_status_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investment_summary_by_loan_status_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_investment_summary_by_loan_status_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/investment-summary-by-loan-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CategorizedInvestmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investment_summary_by_loan_type_using_post(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by loan type for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_loan_type_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investment_summary_by_loan_type_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investment_summary_by_loan_type_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_investment_summary_by_loan_type_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by loan type for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_loan_type_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investment_summary_by_loan_type_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_investment_summary_by_loan_type_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/investment-summary-by-loan-type', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CategorizedInvestmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_investment_summary_by_maturity_using_post(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by maturity for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_maturity_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_investment_summary_by_maturity_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_investment_summary_by_maturity_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_investment_summary_by_maturity_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Get investment summary by maturity for current client and given filter  # noqa: E501

        Returns list of categorized investment models  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_investment_summary_by_maturity_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvestmentFilterModel filter: filter (required)
        :return: list[CategorizedInvestmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_investment_summary_by_maturity_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_investment_summary_by_maturity_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/investment-summary-by-maturity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CategorizedInvestmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_outstanding_balance_using_get(self, **kwargs):  # noqa: E501
        """Get outstanding balance for current client  # noqa: E501

        Returns balance model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outstanding_balance_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BalanceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outstanding_balance_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_outstanding_balance_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_outstanding_balance_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get outstanding balance for current client  # noqa: E501

        Returns balance model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outstanding_balance_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BalanceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outstanding_balance_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/outstanding-balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xirr_using_post(self, filter, **kwargs):  # noqa: E501
        """Calculate XIRR for current client and given filter  # noqa: E501

        Returns XIRR model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xirr_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param XirrFilterModel filter: filter (required)
        :return: XirrModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_xirr_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_xirr_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_xirr_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """Calculate XIRR for current client and given filter  # noqa: E501

        Returns XIRR model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xirr_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param XirrFilterModel filter: filter (required)
        :return: XirrModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xirr_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_xirr_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/ia/accounts/xirr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XirrModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
