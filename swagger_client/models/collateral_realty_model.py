# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CollateralRealtyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area': 'float',
        'coordinates': 'Coordinates',
        'location': 'str',
        'long_description': 'dict(str, str)',
        'number_of_rooms': 'int',
        'type': 'str',
        'valuation': 'float',
        'valuator': 'str',
        'valuator_url': 'str',
        'year_of_construction': 'int'
    }

    attribute_map = {
        'area': 'area',
        'coordinates': 'coordinates',
        'location': 'location',
        'long_description': 'long_description',
        'number_of_rooms': 'number_of_rooms',
        'type': 'type',
        'valuation': 'valuation',
        'valuator': 'valuator',
        'valuator_url': 'valuator_url',
        'year_of_construction': 'year_of_construction'
    }

    def __init__(self, area=None, coordinates=None, location=None, long_description=None, number_of_rooms=None, type=None, valuation=None, valuator=None, valuator_url=None, year_of_construction=None):  # noqa: E501
        """CollateralRealtyModel - a model defined in Swagger"""  # noqa: E501

        self._area = None
        self._coordinates = None
        self._location = None
        self._long_description = None
        self._number_of_rooms = None
        self._type = None
        self._valuation = None
        self._valuator = None
        self._valuator_url = None
        self._year_of_construction = None
        self.discriminator = None

        if area is not None:
            self.area = area
        if coordinates is not None:
            self.coordinates = coordinates
        if location is not None:
            self.location = location
        if long_description is not None:
            self.long_description = long_description
        if number_of_rooms is not None:
            self.number_of_rooms = number_of_rooms
        if type is not None:
            self.type = type
        if valuation is not None:
            self.valuation = valuation
        if valuator is not None:
            self.valuator = valuator
        if valuator_url is not None:
            self.valuator_url = valuator_url
        if year_of_construction is not None:
            self.year_of_construction = year_of_construction

    @property
    def area(self):
        """Gets the area of this CollateralRealtyModel.  # noqa: E501


        :return: The area of this CollateralRealtyModel.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this CollateralRealtyModel.


        :param area: The area of this CollateralRealtyModel.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def coordinates(self):
        """Gets the coordinates of this CollateralRealtyModel.  # noqa: E501


        :return: The coordinates of this CollateralRealtyModel.  # noqa: E501
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this CollateralRealtyModel.


        :param coordinates: The coordinates of this CollateralRealtyModel.  # noqa: E501
        :type: Coordinates
        """

        self._coordinates = coordinates

    @property
    def location(self):
        """Gets the location of this CollateralRealtyModel.  # noqa: E501


        :return: The location of this CollateralRealtyModel.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CollateralRealtyModel.


        :param location: The location of this CollateralRealtyModel.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def long_description(self):
        """Gets the long_description of this CollateralRealtyModel.  # noqa: E501


        :return: The long_description of this CollateralRealtyModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this CollateralRealtyModel.


        :param long_description: The long_description of this CollateralRealtyModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._long_description = long_description

    @property
    def number_of_rooms(self):
        """Gets the number_of_rooms of this CollateralRealtyModel.  # noqa: E501


        :return: The number_of_rooms of this CollateralRealtyModel.  # noqa: E501
        :rtype: int
        """
        return self._number_of_rooms

    @number_of_rooms.setter
    def number_of_rooms(self, number_of_rooms):
        """Sets the number_of_rooms of this CollateralRealtyModel.


        :param number_of_rooms: The number_of_rooms of this CollateralRealtyModel.  # noqa: E501
        :type: int
        """

        self._number_of_rooms = number_of_rooms

    @property
    def type(self):
        """Gets the type of this CollateralRealtyModel.  # noqa: E501


        :return: The type of this CollateralRealtyModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CollateralRealtyModel.


        :param type: The type of this CollateralRealtyModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["APARTMENT", "HOUSE", "COMMERCIAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def valuation(self):
        """Gets the valuation of this CollateralRealtyModel.  # noqa: E501


        :return: The valuation of this CollateralRealtyModel.  # noqa: E501
        :rtype: float
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this CollateralRealtyModel.


        :param valuation: The valuation of this CollateralRealtyModel.  # noqa: E501
        :type: float
        """

        self._valuation = valuation

    @property
    def valuator(self):
        """Gets the valuator of this CollateralRealtyModel.  # noqa: E501


        :return: The valuator of this CollateralRealtyModel.  # noqa: E501
        :rtype: str
        """
        return self._valuator

    @valuator.setter
    def valuator(self, valuator):
        """Sets the valuator of this CollateralRealtyModel.


        :param valuator: The valuator of this CollateralRealtyModel.  # noqa: E501
        :type: str
        """

        self._valuator = valuator

    @property
    def valuator_url(self):
        """Gets the valuator_url of this CollateralRealtyModel.  # noqa: E501


        :return: The valuator_url of this CollateralRealtyModel.  # noqa: E501
        :rtype: str
        """
        return self._valuator_url

    @valuator_url.setter
    def valuator_url(self, valuator_url):
        """Sets the valuator_url of this CollateralRealtyModel.


        :param valuator_url: The valuator_url of this CollateralRealtyModel.  # noqa: E501
        :type: str
        """

        self._valuator_url = valuator_url

    @property
    def year_of_construction(self):
        """Gets the year_of_construction of this CollateralRealtyModel.  # noqa: E501


        :return: The year_of_construction of this CollateralRealtyModel.  # noqa: E501
        :rtype: int
        """
        return self._year_of_construction

    @year_of_construction.setter
    def year_of_construction(self, year_of_construction):
        """Sets the year_of_construction of this CollateralRealtyModel.


        :param year_of_construction: The year_of_construction of this CollateralRealtyModel.  # noqa: E501
        :type: int
        """

        self._year_of_construction = year_of_construction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollateralRealtyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollateralRealtyModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
