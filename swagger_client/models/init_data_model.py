# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InitDataModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'investor': 'InvestorInfo',
        'loan_configuration': 'LoanConfigurationModel',
        'loan_countries': 'list[CountryModel]',
        'loan_ratings': 'list[LoanRatingDescription]',
        'loan_types': 'list[LoanTypeDescriptionModel]',
        'originator_countries': 'list[CountryModel]',
        'originators': 'list[OriginatorModel]'
    }

    attribute_map = {
        'investor': 'investor',
        'loan_configuration': 'loan_configuration',
        'loan_countries': 'loan_countries',
        'loan_ratings': 'loan_ratings',
        'loan_types': 'loan_types',
        'originator_countries': 'originator_countries',
        'originators': 'originators'
    }

    def __init__(self, investor=None, loan_configuration=None, loan_countries=None, loan_ratings=None, loan_types=None, originator_countries=None, originators=None):  # noqa: E501
        """InitDataModel - a model defined in Swagger"""  # noqa: E501

        self._investor = None
        self._loan_configuration = None
        self._loan_countries = None
        self._loan_ratings = None
        self._loan_types = None
        self._originator_countries = None
        self._originators = None
        self.discriminator = None

        if investor is not None:
            self.investor = investor
        if loan_configuration is not None:
            self.loan_configuration = loan_configuration
        if loan_countries is not None:
            self.loan_countries = loan_countries
        if loan_ratings is not None:
            self.loan_ratings = loan_ratings
        if loan_types is not None:
            self.loan_types = loan_types
        if originator_countries is not None:
            self.originator_countries = originator_countries
        if originators is not None:
            self.originators = originators

    @property
    def investor(self):
        """Gets the investor of this InitDataModel.  # noqa: E501


        :return: The investor of this InitDataModel.  # noqa: E501
        :rtype: InvestorInfo
        """
        return self._investor

    @investor.setter
    def investor(self, investor):
        """Sets the investor of this InitDataModel.


        :param investor: The investor of this InitDataModel.  # noqa: E501
        :type: InvestorInfo
        """

        self._investor = investor

    @property
    def loan_configuration(self):
        """Gets the loan_configuration of this InitDataModel.  # noqa: E501


        :return: The loan_configuration of this InitDataModel.  # noqa: E501
        :rtype: LoanConfigurationModel
        """
        return self._loan_configuration

    @loan_configuration.setter
    def loan_configuration(self, loan_configuration):
        """Sets the loan_configuration of this InitDataModel.


        :param loan_configuration: The loan_configuration of this InitDataModel.  # noqa: E501
        :type: LoanConfigurationModel
        """

        self._loan_configuration = loan_configuration

    @property
    def loan_countries(self):
        """Gets the loan_countries of this InitDataModel.  # noqa: E501


        :return: The loan_countries of this InitDataModel.  # noqa: E501
        :rtype: list[CountryModel]
        """
        return self._loan_countries

    @loan_countries.setter
    def loan_countries(self, loan_countries):
        """Sets the loan_countries of this InitDataModel.


        :param loan_countries: The loan_countries of this InitDataModel.  # noqa: E501
        :type: list[CountryModel]
        """

        self._loan_countries = loan_countries

    @property
    def loan_ratings(self):
        """Gets the loan_ratings of this InitDataModel.  # noqa: E501


        :return: The loan_ratings of this InitDataModel.  # noqa: E501
        :rtype: list[LoanRatingDescription]
        """
        return self._loan_ratings

    @loan_ratings.setter
    def loan_ratings(self, loan_ratings):
        """Sets the loan_ratings of this InitDataModel.


        :param loan_ratings: The loan_ratings of this InitDataModel.  # noqa: E501
        :type: list[LoanRatingDescription]
        """

        self._loan_ratings = loan_ratings

    @property
    def loan_types(self):
        """Gets the loan_types of this InitDataModel.  # noqa: E501


        :return: The loan_types of this InitDataModel.  # noqa: E501
        :rtype: list[LoanTypeDescriptionModel]
        """
        return self._loan_types

    @loan_types.setter
    def loan_types(self, loan_types):
        """Sets the loan_types of this InitDataModel.


        :param loan_types: The loan_types of this InitDataModel.  # noqa: E501
        :type: list[LoanTypeDescriptionModel]
        """

        self._loan_types = loan_types

    @property
    def originator_countries(self):
        """Gets the originator_countries of this InitDataModel.  # noqa: E501


        :return: The originator_countries of this InitDataModel.  # noqa: E501
        :rtype: list[CountryModel]
        """
        return self._originator_countries

    @originator_countries.setter
    def originator_countries(self, originator_countries):
        """Sets the originator_countries of this InitDataModel.


        :param originator_countries: The originator_countries of this InitDataModel.  # noqa: E501
        :type: list[CountryModel]
        """

        self._originator_countries = originator_countries

    @property
    def originators(self):
        """Gets the originators of this InitDataModel.  # noqa: E501


        :return: The originators of this InitDataModel.  # noqa: E501
        :rtype: list[OriginatorModel]
        """
        return self._originators

    @originators.setter
    def originators(self, originators):
        """Sets the originators of this InitDataModel.


        :param originators: The originators of this InitDataModel.  # noqa: E501
        :type: list[OriginatorModel]
        """

        self._originators = originators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitDataModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitDataModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
