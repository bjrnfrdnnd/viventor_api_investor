# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OriginatorSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_interest': 'float',
        'loans_funded': 'float',
        'originator_id': 'int',
        'portfolio': 'float'
    }

    attribute_map = {
        'average_interest': 'averageInterest',
        'loans_funded': 'loansFunded',
        'originator_id': 'originatorId',
        'portfolio': 'portfolio'
    }

    def __init__(self, average_interest=None, loans_funded=None, originator_id=None, portfolio=None):  # noqa: E501
        """OriginatorSummary - a model defined in Swagger"""  # noqa: E501

        self._average_interest = None
        self._loans_funded = None
        self._originator_id = None
        self._portfolio = None
        self.discriminator = None

        if average_interest is not None:
            self.average_interest = average_interest
        if loans_funded is not None:
            self.loans_funded = loans_funded
        if originator_id is not None:
            self.originator_id = originator_id
        if portfolio is not None:
            self.portfolio = portfolio

    @property
    def average_interest(self):
        """Gets the average_interest of this OriginatorSummary.  # noqa: E501


        :return: The average_interest of this OriginatorSummary.  # noqa: E501
        :rtype: float
        """
        return self._average_interest

    @average_interest.setter
    def average_interest(self, average_interest):
        """Sets the average_interest of this OriginatorSummary.


        :param average_interest: The average_interest of this OriginatorSummary.  # noqa: E501
        :type: float
        """

        self._average_interest = average_interest

    @property
    def loans_funded(self):
        """Gets the loans_funded of this OriginatorSummary.  # noqa: E501


        :return: The loans_funded of this OriginatorSummary.  # noqa: E501
        :rtype: float
        """
        return self._loans_funded

    @loans_funded.setter
    def loans_funded(self, loans_funded):
        """Sets the loans_funded of this OriginatorSummary.


        :param loans_funded: The loans_funded of this OriginatorSummary.  # noqa: E501
        :type: float
        """

        self._loans_funded = loans_funded

    @property
    def originator_id(self):
        """Gets the originator_id of this OriginatorSummary.  # noqa: E501


        :return: The originator_id of this OriginatorSummary.  # noqa: E501
        :rtype: int
        """
        return self._originator_id

    @originator_id.setter
    def originator_id(self, originator_id):
        """Sets the originator_id of this OriginatorSummary.


        :param originator_id: The originator_id of this OriginatorSummary.  # noqa: E501
        :type: int
        """

        self._originator_id = originator_id

    @property
    def portfolio(self):
        """Gets the portfolio of this OriginatorSummary.  # noqa: E501


        :return: The portfolio of this OriginatorSummary.  # noqa: E501
        :rtype: float
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this OriginatorSummary.


        :param portfolio: The portfolio of this OriginatorSummary.  # noqa: E501
        :type: float
        """

        self._portfolio = portfolio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OriginatorSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OriginatorSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
