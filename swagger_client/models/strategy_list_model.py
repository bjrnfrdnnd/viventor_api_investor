# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StrategyListModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'balance': 'float',
        'id': 'int',
        'investments': 'int',
        'max_interest_rate': 'float',
        'max_note_amount': 'float',
        'min_interest_rate': 'float',
        'name': 'str',
        'total_size': 'float'
    }

    attribute_map = {
        'active': 'active',
        'balance': 'balance',
        'id': 'id',
        'investments': 'investments',
        'max_interest_rate': 'max_interest_rate',
        'max_note_amount': 'max_note_amount',
        'min_interest_rate': 'min_interest_rate',
        'name': 'name',
        'total_size': 'total_size'
    }

    def __init__(self, active=None, balance=None, id=None, investments=None, max_interest_rate=None, max_note_amount=None, min_interest_rate=None, name=None, total_size=None):  # noqa: E501
        """StrategyListModel - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._balance = None
        self._id = None
        self._investments = None
        self._max_interest_rate = None
        self._max_note_amount = None
        self._min_interest_rate = None
        self._name = None
        self._total_size = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if balance is not None:
            self.balance = balance
        if id is not None:
            self.id = id
        if investments is not None:
            self.investments = investments
        if max_interest_rate is not None:
            self.max_interest_rate = max_interest_rate
        if max_note_amount is not None:
            self.max_note_amount = max_note_amount
        if min_interest_rate is not None:
            self.min_interest_rate = min_interest_rate
        if name is not None:
            self.name = name
        if total_size is not None:
            self.total_size = total_size

    @property
    def active(self):
        """Gets the active of this StrategyListModel.  # noqa: E501


        :return: The active of this StrategyListModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StrategyListModel.


        :param active: The active of this StrategyListModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def balance(self):
        """Gets the balance of this StrategyListModel.  # noqa: E501


        :return: The balance of this StrategyListModel.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this StrategyListModel.


        :param balance: The balance of this StrategyListModel.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def id(self):
        """Gets the id of this StrategyListModel.  # noqa: E501


        :return: The id of this StrategyListModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StrategyListModel.


        :param id: The id of this StrategyListModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def investments(self):
        """Gets the investments of this StrategyListModel.  # noqa: E501


        :return: The investments of this StrategyListModel.  # noqa: E501
        :rtype: int
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """Sets the investments of this StrategyListModel.


        :param investments: The investments of this StrategyListModel.  # noqa: E501
        :type: int
        """

        self._investments = investments

    @property
    def max_interest_rate(self):
        """Gets the max_interest_rate of this StrategyListModel.  # noqa: E501


        :return: The max_interest_rate of this StrategyListModel.  # noqa: E501
        :rtype: float
        """
        return self._max_interest_rate

    @max_interest_rate.setter
    def max_interest_rate(self, max_interest_rate):
        """Sets the max_interest_rate of this StrategyListModel.


        :param max_interest_rate: The max_interest_rate of this StrategyListModel.  # noqa: E501
        :type: float
        """

        self._max_interest_rate = max_interest_rate

    @property
    def max_note_amount(self):
        """Gets the max_note_amount of this StrategyListModel.  # noqa: E501


        :return: The max_note_amount of this StrategyListModel.  # noqa: E501
        :rtype: float
        """
        return self._max_note_amount

    @max_note_amount.setter
    def max_note_amount(self, max_note_amount):
        """Sets the max_note_amount of this StrategyListModel.


        :param max_note_amount: The max_note_amount of this StrategyListModel.  # noqa: E501
        :type: float
        """

        self._max_note_amount = max_note_amount

    @property
    def min_interest_rate(self):
        """Gets the min_interest_rate of this StrategyListModel.  # noqa: E501


        :return: The min_interest_rate of this StrategyListModel.  # noqa: E501
        :rtype: float
        """
        return self._min_interest_rate

    @min_interest_rate.setter
    def min_interest_rate(self, min_interest_rate):
        """Sets the min_interest_rate of this StrategyListModel.


        :param min_interest_rate: The min_interest_rate of this StrategyListModel.  # noqa: E501
        :type: float
        """

        self._min_interest_rate = min_interest_rate

    @property
    def name(self):
        """Gets the name of this StrategyListModel.  # noqa: E501


        :return: The name of this StrategyListModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StrategyListModel.


        :param name: The name of this StrategyListModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def total_size(self):
        """Gets the total_size of this StrategyListModel.  # noqa: E501


        :return: The total_size of this StrategyListModel.  # noqa: E501
        :rtype: float
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this StrategyListModel.


        :param total_size: The total_size of this StrategyListModel.  # noqa: E501
        :type: float
        """

        self._total_size = total_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StrategyListModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StrategyListModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
