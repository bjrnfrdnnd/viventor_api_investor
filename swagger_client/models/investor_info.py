# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvestorInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activated_at': 'datetime',
        'auto_invest_active': 'bool',
        'country': 'str',
        'created_at': 'datetime',
        'data_processing_accepted_at': 'datetime',
        'doc_bill_accepted': 'bool',
        'doc_passport_accepted': 'bool',
        'doc_tax_accepted': 'bool',
        'email': 'str',
        'first_name': 'str',
        'funds_available': 'float',
        'funds_invested': 'float',
        'gfc': 'bool',
        'id': 'int',
        'intercom_hash': 'str',
        'language': 'str',
        'last_investment_at': 'date',
        'last_name': 'str',
        'number': 'int',
        'occupation': 'str',
        'phone': 'str',
        'privacy_policy_accepted_at': 'datetime',
        'promo_code': 'str',
        'status': 'str',
        'terms_accepted_at': 'datetime',
        'type': 'str'
    }

    attribute_map = {
        'activated_at': 'activatedAt',
        'auto_invest_active': 'autoInvestActive',
        'country': 'country',
        'created_at': 'createdAt',
        'data_processing_accepted_at': 'dataProcessingAcceptedAt',
        'doc_bill_accepted': 'docBillAccepted',
        'doc_passport_accepted': 'docPassportAccepted',
        'doc_tax_accepted': 'docTaxAccepted',
        'email': 'email',
        'first_name': 'firstName',
        'funds_available': 'fundsAvailable',
        'funds_invested': 'fundsInvested',
        'gfc': 'gfc',
        'id': 'id',
        'intercom_hash': 'intercomHash',
        'language': 'language',
        'last_investment_at': 'lastInvestmentAt',
        'last_name': 'lastName',
        'number': 'number',
        'occupation': 'occupation',
        'phone': 'phone',
        'privacy_policy_accepted_at': 'privacyPolicyAcceptedAt',
        'promo_code': 'promoCode',
        'status': 'status',
        'terms_accepted_at': 'termsAcceptedAt',
        'type': 'type'
    }

    def __init__(self, activated_at=None, auto_invest_active=None, country=None, created_at=None, data_processing_accepted_at=None, doc_bill_accepted=None, doc_passport_accepted=None, doc_tax_accepted=None, email=None, first_name=None, funds_available=None, funds_invested=None, gfc=None, id=None, intercom_hash=None, language=None, last_investment_at=None, last_name=None, number=None, occupation=None, phone=None, privacy_policy_accepted_at=None, promo_code=None, status=None, terms_accepted_at=None, type=None):  # noqa: E501
        """InvestorInfo - a model defined in Swagger"""  # noqa: E501

        self._activated_at = None
        self._auto_invest_active = None
        self._country = None
        self._created_at = None
        self._data_processing_accepted_at = None
        self._doc_bill_accepted = None
        self._doc_passport_accepted = None
        self._doc_tax_accepted = None
        self._email = None
        self._first_name = None
        self._funds_available = None
        self._funds_invested = None
        self._gfc = None
        self._id = None
        self._intercom_hash = None
        self._language = None
        self._last_investment_at = None
        self._last_name = None
        self._number = None
        self._occupation = None
        self._phone = None
        self._privacy_policy_accepted_at = None
        self._promo_code = None
        self._status = None
        self._terms_accepted_at = None
        self._type = None
        self.discriminator = None

        if activated_at is not None:
            self.activated_at = activated_at
        if auto_invest_active is not None:
            self.auto_invest_active = auto_invest_active
        if country is not None:
            self.country = country
        if created_at is not None:
            self.created_at = created_at
        if data_processing_accepted_at is not None:
            self.data_processing_accepted_at = data_processing_accepted_at
        if doc_bill_accepted is not None:
            self.doc_bill_accepted = doc_bill_accepted
        if doc_passport_accepted is not None:
            self.doc_passport_accepted = doc_passport_accepted
        if doc_tax_accepted is not None:
            self.doc_tax_accepted = doc_tax_accepted
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if funds_available is not None:
            self.funds_available = funds_available
        if funds_invested is not None:
            self.funds_invested = funds_invested
        if gfc is not None:
            self.gfc = gfc
        if id is not None:
            self.id = id
        if intercom_hash is not None:
            self.intercom_hash = intercom_hash
        if language is not None:
            self.language = language
        if last_investment_at is not None:
            self.last_investment_at = last_investment_at
        if last_name is not None:
            self.last_name = last_name
        if number is not None:
            self.number = number
        if occupation is not None:
            self.occupation = occupation
        if phone is not None:
            self.phone = phone
        if privacy_policy_accepted_at is not None:
            self.privacy_policy_accepted_at = privacy_policy_accepted_at
        if promo_code is not None:
            self.promo_code = promo_code
        if status is not None:
            self.status = status
        if terms_accepted_at is not None:
            self.terms_accepted_at = terms_accepted_at
        if type is not None:
            self.type = type

    @property
    def activated_at(self):
        """Gets the activated_at of this InvestorInfo.  # noqa: E501


        :return: The activated_at of this InvestorInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this InvestorInfo.


        :param activated_at: The activated_at of this InvestorInfo.  # noqa: E501
        :type: datetime
        """

        self._activated_at = activated_at

    @property
    def auto_invest_active(self):
        """Gets the auto_invest_active of this InvestorInfo.  # noqa: E501


        :return: The auto_invest_active of this InvestorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._auto_invest_active

    @auto_invest_active.setter
    def auto_invest_active(self, auto_invest_active):
        """Sets the auto_invest_active of this InvestorInfo.


        :param auto_invest_active: The auto_invest_active of this InvestorInfo.  # noqa: E501
        :type: bool
        """

        self._auto_invest_active = auto_invest_active

    @property
    def country(self):
        """Gets the country of this InvestorInfo.  # noqa: E501


        :return: The country of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InvestorInfo.


        :param country: The country of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this InvestorInfo.  # noqa: E501


        :return: The created_at of this InvestorInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InvestorInfo.


        :param created_at: The created_at of this InvestorInfo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data_processing_accepted_at(self):
        """Gets the data_processing_accepted_at of this InvestorInfo.  # noqa: E501


        :return: The data_processing_accepted_at of this InvestorInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._data_processing_accepted_at

    @data_processing_accepted_at.setter
    def data_processing_accepted_at(self, data_processing_accepted_at):
        """Sets the data_processing_accepted_at of this InvestorInfo.


        :param data_processing_accepted_at: The data_processing_accepted_at of this InvestorInfo.  # noqa: E501
        :type: datetime
        """

        self._data_processing_accepted_at = data_processing_accepted_at

    @property
    def doc_bill_accepted(self):
        """Gets the doc_bill_accepted of this InvestorInfo.  # noqa: E501


        :return: The doc_bill_accepted of this InvestorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._doc_bill_accepted

    @doc_bill_accepted.setter
    def doc_bill_accepted(self, doc_bill_accepted):
        """Sets the doc_bill_accepted of this InvestorInfo.


        :param doc_bill_accepted: The doc_bill_accepted of this InvestorInfo.  # noqa: E501
        :type: bool
        """

        self._doc_bill_accepted = doc_bill_accepted

    @property
    def doc_passport_accepted(self):
        """Gets the doc_passport_accepted of this InvestorInfo.  # noqa: E501


        :return: The doc_passport_accepted of this InvestorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._doc_passport_accepted

    @doc_passport_accepted.setter
    def doc_passport_accepted(self, doc_passport_accepted):
        """Sets the doc_passport_accepted of this InvestorInfo.


        :param doc_passport_accepted: The doc_passport_accepted of this InvestorInfo.  # noqa: E501
        :type: bool
        """

        self._doc_passport_accepted = doc_passport_accepted

    @property
    def doc_tax_accepted(self):
        """Gets the doc_tax_accepted of this InvestorInfo.  # noqa: E501


        :return: The doc_tax_accepted of this InvestorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._doc_tax_accepted

    @doc_tax_accepted.setter
    def doc_tax_accepted(self, doc_tax_accepted):
        """Sets the doc_tax_accepted of this InvestorInfo.


        :param doc_tax_accepted: The doc_tax_accepted of this InvestorInfo.  # noqa: E501
        :type: bool
        """

        self._doc_tax_accepted = doc_tax_accepted

    @property
    def email(self):
        """Gets the email of this InvestorInfo.  # noqa: E501


        :return: The email of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InvestorInfo.


        :param email: The email of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this InvestorInfo.  # noqa: E501


        :return: The first_name of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InvestorInfo.


        :param first_name: The first_name of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def funds_available(self):
        """Gets the funds_available of this InvestorInfo.  # noqa: E501


        :return: The funds_available of this InvestorInfo.  # noqa: E501
        :rtype: float
        """
        return self._funds_available

    @funds_available.setter
    def funds_available(self, funds_available):
        """Sets the funds_available of this InvestorInfo.


        :param funds_available: The funds_available of this InvestorInfo.  # noqa: E501
        :type: float
        """

        self._funds_available = funds_available

    @property
    def funds_invested(self):
        """Gets the funds_invested of this InvestorInfo.  # noqa: E501


        :return: The funds_invested of this InvestorInfo.  # noqa: E501
        :rtype: float
        """
        return self._funds_invested

    @funds_invested.setter
    def funds_invested(self, funds_invested):
        """Sets the funds_invested of this InvestorInfo.


        :param funds_invested: The funds_invested of this InvestorInfo.  # noqa: E501
        :type: float
        """

        self._funds_invested = funds_invested

    @property
    def gfc(self):
        """Gets the gfc of this InvestorInfo.  # noqa: E501


        :return: The gfc of this InvestorInfo.  # noqa: E501
        :rtype: bool
        """
        return self._gfc

    @gfc.setter
    def gfc(self, gfc):
        """Sets the gfc of this InvestorInfo.


        :param gfc: The gfc of this InvestorInfo.  # noqa: E501
        :type: bool
        """

        self._gfc = gfc

    @property
    def id(self):
        """Gets the id of this InvestorInfo.  # noqa: E501


        :return: The id of this InvestorInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvestorInfo.


        :param id: The id of this InvestorInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def intercom_hash(self):
        """Gets the intercom_hash of this InvestorInfo.  # noqa: E501


        :return: The intercom_hash of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._intercom_hash

    @intercom_hash.setter
    def intercom_hash(self, intercom_hash):
        """Sets the intercom_hash of this InvestorInfo.


        :param intercom_hash: The intercom_hash of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._intercom_hash = intercom_hash

    @property
    def language(self):
        """Gets the language of this InvestorInfo.  # noqa: E501


        :return: The language of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InvestorInfo.


        :param language: The language of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def last_investment_at(self):
        """Gets the last_investment_at of this InvestorInfo.  # noqa: E501


        :return: The last_investment_at of this InvestorInfo.  # noqa: E501
        :rtype: date
        """
        return self._last_investment_at

    @last_investment_at.setter
    def last_investment_at(self, last_investment_at):
        """Sets the last_investment_at of this InvestorInfo.


        :param last_investment_at: The last_investment_at of this InvestorInfo.  # noqa: E501
        :type: date
        """

        self._last_investment_at = last_investment_at

    @property
    def last_name(self):
        """Gets the last_name of this InvestorInfo.  # noqa: E501


        :return: The last_name of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InvestorInfo.


        :param last_name: The last_name of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def number(self):
        """Gets the number of this InvestorInfo.  # noqa: E501


        :return: The number of this InvestorInfo.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InvestorInfo.


        :param number: The number of this InvestorInfo.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def occupation(self):
        """Gets the occupation of this InvestorInfo.  # noqa: E501


        :return: The occupation of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this InvestorInfo.


        :param occupation: The occupation of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._occupation = occupation

    @property
    def phone(self):
        """Gets the phone of this InvestorInfo.  # noqa: E501


        :return: The phone of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this InvestorInfo.


        :param phone: The phone of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def privacy_policy_accepted_at(self):
        """Gets the privacy_policy_accepted_at of this InvestorInfo.  # noqa: E501


        :return: The privacy_policy_accepted_at of this InvestorInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._privacy_policy_accepted_at

    @privacy_policy_accepted_at.setter
    def privacy_policy_accepted_at(self, privacy_policy_accepted_at):
        """Sets the privacy_policy_accepted_at of this InvestorInfo.


        :param privacy_policy_accepted_at: The privacy_policy_accepted_at of this InvestorInfo.  # noqa: E501
        :type: datetime
        """

        self._privacy_policy_accepted_at = privacy_policy_accepted_at

    @property
    def promo_code(self):
        """Gets the promo_code of this InvestorInfo.  # noqa: E501


        :return: The promo_code of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._promo_code

    @promo_code.setter
    def promo_code(self, promo_code):
        """Sets the promo_code of this InvestorInfo.


        :param promo_code: The promo_code of this InvestorInfo.  # noqa: E501
        :type: str
        """

        self._promo_code = promo_code

    @property
    def status(self):
        """Gets the status of this InvestorInfo.  # noqa: E501


        :return: The status of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvestorInfo.


        :param status: The status of this InvestorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRE_REGISTERED", "REGISTERED", "ACTIVE", "CLOSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def terms_accepted_at(self):
        """Gets the terms_accepted_at of this InvestorInfo.  # noqa: E501


        :return: The terms_accepted_at of this InvestorInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._terms_accepted_at

    @terms_accepted_at.setter
    def terms_accepted_at(self, terms_accepted_at):
        """Sets the terms_accepted_at of this InvestorInfo.


        :param terms_accepted_at: The terms_accepted_at of this InvestorInfo.  # noqa: E501
        :type: datetime
        """

        self._terms_accepted_at = terms_accepted_at

    @property
    def type(self):
        """Gets the type of this InvestorInfo.  # noqa: E501


        :return: The type of this InvestorInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvestorInfo.


        :param type: The type of this InvestorInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERSON", "COMPANY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestorInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestorInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
