# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilterConfigurationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_interest': 'int',
        'max_ltv': 'int',
        'max_term': 'int',
        'min_interest': 'int',
        'min_ltv': 'int',
        'min_term': 'int'
    }

    attribute_map = {
        'max_interest': 'max_interest',
        'max_ltv': 'max_ltv',
        'max_term': 'max_term',
        'min_interest': 'min_interest',
        'min_ltv': 'min_ltv',
        'min_term': 'min_term'
    }

    def __init__(self, max_interest=None, max_ltv=None, max_term=None, min_interest=None, min_ltv=None, min_term=None):  # noqa: E501
        """FilterConfigurationModel - a model defined in Swagger"""  # noqa: E501

        self._max_interest = None
        self._max_ltv = None
        self._max_term = None
        self._min_interest = None
        self._min_ltv = None
        self._min_term = None
        self.discriminator = None

        if max_interest is not None:
            self.max_interest = max_interest
        if max_ltv is not None:
            self.max_ltv = max_ltv
        if max_term is not None:
            self.max_term = max_term
        if min_interest is not None:
            self.min_interest = min_interest
        if min_ltv is not None:
            self.min_ltv = min_ltv
        if min_term is not None:
            self.min_term = min_term

    @property
    def max_interest(self):
        """Gets the max_interest of this FilterConfigurationModel.  # noqa: E501


        :return: The max_interest of this FilterConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._max_interest

    @max_interest.setter
    def max_interest(self, max_interest):
        """Sets the max_interest of this FilterConfigurationModel.


        :param max_interest: The max_interest of this FilterConfigurationModel.  # noqa: E501
        :type: int
        """

        self._max_interest = max_interest

    @property
    def max_ltv(self):
        """Gets the max_ltv of this FilterConfigurationModel.  # noqa: E501


        :return: The max_ltv of this FilterConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._max_ltv

    @max_ltv.setter
    def max_ltv(self, max_ltv):
        """Sets the max_ltv of this FilterConfigurationModel.


        :param max_ltv: The max_ltv of this FilterConfigurationModel.  # noqa: E501
        :type: int
        """

        self._max_ltv = max_ltv

    @property
    def max_term(self):
        """Gets the max_term of this FilterConfigurationModel.  # noqa: E501


        :return: The max_term of this FilterConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._max_term

    @max_term.setter
    def max_term(self, max_term):
        """Sets the max_term of this FilterConfigurationModel.


        :param max_term: The max_term of this FilterConfigurationModel.  # noqa: E501
        :type: int
        """

        self._max_term = max_term

    @property
    def min_interest(self):
        """Gets the min_interest of this FilterConfigurationModel.  # noqa: E501


        :return: The min_interest of this FilterConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._min_interest

    @min_interest.setter
    def min_interest(self, min_interest):
        """Sets the min_interest of this FilterConfigurationModel.


        :param min_interest: The min_interest of this FilterConfigurationModel.  # noqa: E501
        :type: int
        """

        self._min_interest = min_interest

    @property
    def min_ltv(self):
        """Gets the min_ltv of this FilterConfigurationModel.  # noqa: E501


        :return: The min_ltv of this FilterConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._min_ltv

    @min_ltv.setter
    def min_ltv(self, min_ltv):
        """Sets the min_ltv of this FilterConfigurationModel.


        :param min_ltv: The min_ltv of this FilterConfigurationModel.  # noqa: E501
        :type: int
        """

        self._min_ltv = min_ltv

    @property
    def min_term(self):
        """Gets the min_term of this FilterConfigurationModel.  # noqa: E501


        :return: The min_term of this FilterConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._min_term

    @min_term.setter
    def min_term(self, min_term):
        """Sets the min_term of this FilterConfigurationModel.


        :param min_term: The min_term of this FilterConfigurationModel.  # noqa: E501
        :type: int
        """

        self._min_term = min_term

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterConfigurationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterConfigurationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
