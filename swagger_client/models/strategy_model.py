# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StrategyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'already_invested': 'bool',
        'balance': 'float',
        'countries': 'list[int]',
        'extension_opt_in': 'bool',
        'id': 'int',
        'loan_ratings': 'list[str]',
        'loan_statuses': 'list[str]',
        'loan_types': 'list[str]',
        'max_interest_rate': 'float',
        'max_ltv': 'float',
        'max_note_amount': 'float',
        'max_remaining_loan_term_months': 'int',
        'min_interest_rate': 'float',
        'min_remaining_loan_term_months': 'int',
        'name': 'str',
        'originators': 'list[int]',
        'total_size': 'float'
    }

    attribute_map = {
        'active': 'active',
        'already_invested': 'already_invested',
        'balance': 'balance',
        'countries': 'countries',
        'extension_opt_in': 'extension_opt_in',
        'id': 'id',
        'loan_ratings': 'loan_ratings',
        'loan_statuses': 'loan_statuses',
        'loan_types': 'loan_types',
        'max_interest_rate': 'max_interest_rate',
        'max_ltv': 'max_ltv',
        'max_note_amount': 'max_note_amount',
        'max_remaining_loan_term_months': 'max_remaining_loan_term_months',
        'min_interest_rate': 'min_interest_rate',
        'min_remaining_loan_term_months': 'min_remaining_loan_term_months',
        'name': 'name',
        'originators': 'originators',
        'total_size': 'total_size'
    }

    def __init__(self, active=None, already_invested=None, balance=None, countries=None, extension_opt_in=None, id=None, loan_ratings=None, loan_statuses=None, loan_types=None, max_interest_rate=None, max_ltv=None, max_note_amount=None, max_remaining_loan_term_months=None, min_interest_rate=None, min_remaining_loan_term_months=None, name=None, originators=None, total_size=None):  # noqa: E501
        """StrategyModel - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._already_invested = None
        self._balance = None
        self._countries = None
        self._extension_opt_in = None
        self._id = None
        self._loan_ratings = None
        self._loan_statuses = None
        self._loan_types = None
        self._max_interest_rate = None
        self._max_ltv = None
        self._max_note_amount = None
        self._max_remaining_loan_term_months = None
        self._min_interest_rate = None
        self._min_remaining_loan_term_months = None
        self._name = None
        self._originators = None
        self._total_size = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if already_invested is not None:
            self.already_invested = already_invested
        if balance is not None:
            self.balance = balance
        if countries is not None:
            self.countries = countries
        if extension_opt_in is not None:
            self.extension_opt_in = extension_opt_in
        if id is not None:
            self.id = id
        if loan_ratings is not None:
            self.loan_ratings = loan_ratings
        if loan_statuses is not None:
            self.loan_statuses = loan_statuses
        if loan_types is not None:
            self.loan_types = loan_types
        if max_interest_rate is not None:
            self.max_interest_rate = max_interest_rate
        if max_ltv is not None:
            self.max_ltv = max_ltv
        if max_note_amount is not None:
            self.max_note_amount = max_note_amount
        if max_remaining_loan_term_months is not None:
            self.max_remaining_loan_term_months = max_remaining_loan_term_months
        if min_interest_rate is not None:
            self.min_interest_rate = min_interest_rate
        if min_remaining_loan_term_months is not None:
            self.min_remaining_loan_term_months = min_remaining_loan_term_months
        if name is not None:
            self.name = name
        if originators is not None:
            self.originators = originators
        if total_size is not None:
            self.total_size = total_size

    @property
    def active(self):
        """Gets the active of this StrategyModel.  # noqa: E501


        :return: The active of this StrategyModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StrategyModel.


        :param active: The active of this StrategyModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def already_invested(self):
        """Gets the already_invested of this StrategyModel.  # noqa: E501


        :return: The already_invested of this StrategyModel.  # noqa: E501
        :rtype: bool
        """
        return self._already_invested

    @already_invested.setter
    def already_invested(self, already_invested):
        """Sets the already_invested of this StrategyModel.


        :param already_invested: The already_invested of this StrategyModel.  # noqa: E501
        :type: bool
        """

        self._already_invested = already_invested

    @property
    def balance(self):
        """Gets the balance of this StrategyModel.  # noqa: E501


        :return: The balance of this StrategyModel.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this StrategyModel.


        :param balance: The balance of this StrategyModel.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def countries(self):
        """Gets the countries of this StrategyModel.  # noqa: E501


        :return: The countries of this StrategyModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this StrategyModel.


        :param countries: The countries of this StrategyModel.  # noqa: E501
        :type: list[int]
        """

        self._countries = countries

    @property
    def extension_opt_in(self):
        """Gets the extension_opt_in of this StrategyModel.  # noqa: E501


        :return: The extension_opt_in of this StrategyModel.  # noqa: E501
        :rtype: bool
        """
        return self._extension_opt_in

    @extension_opt_in.setter
    def extension_opt_in(self, extension_opt_in):
        """Sets the extension_opt_in of this StrategyModel.


        :param extension_opt_in: The extension_opt_in of this StrategyModel.  # noqa: E501
        :type: bool
        """

        self._extension_opt_in = extension_opt_in

    @property
    def id(self):
        """Gets the id of this StrategyModel.  # noqa: E501


        :return: The id of this StrategyModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StrategyModel.


        :param id: The id of this StrategyModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_ratings(self):
        """Gets the loan_ratings of this StrategyModel.  # noqa: E501


        :return: The loan_ratings of this StrategyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_ratings

    @loan_ratings.setter
    def loan_ratings(self, loan_ratings):
        """Sets the loan_ratings of this StrategyModel.


        :param loan_ratings: The loan_ratings of this StrategyModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NO_GUARANTEE", "BUYBACK", "PAYMENT_GUARANTEE", "BANK_GUARANTEE"]  # noqa: E501
        if not set(loan_ratings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_ratings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_ratings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_ratings = loan_ratings

    @property
    def loan_statuses(self):
        """Gets the loan_statuses of this StrategyModel.  # noqa: E501


        :return: The loan_statuses of this StrategyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_statuses

    @loan_statuses.setter
    def loan_statuses(self, loan_statuses):
        """Sets the loan_statuses of this StrategyModel.


        :param loan_statuses: The loan_statuses of this StrategyModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CURRENT", "DELAYED_1_30", "DELAYED_31_60", "DELAYED_61_PLUS", "CLOSED"]  # noqa: E501
        if not set(loan_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_statuses = loan_statuses

    @property
    def loan_types(self):
        """Gets the loan_types of this StrategyModel.  # noqa: E501


        :return: The loan_types of this StrategyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_types

    @loan_types.setter
    def loan_types(self, loan_types):
        """Sets the loan_types of this StrategyModel.


        :param loan_types: The loan_types of this StrategyModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MORTGAGE", "CONSUMER", "INVOICE_FINANCING", "BUSINESS", "LINE_OF_CREDIT", "PAWNBROKING"]  # noqa: E501
        if not set(loan_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_types = loan_types

    @property
    def max_interest_rate(self):
        """Gets the max_interest_rate of this StrategyModel.  # noqa: E501


        :return: The max_interest_rate of this StrategyModel.  # noqa: E501
        :rtype: float
        """
        return self._max_interest_rate

    @max_interest_rate.setter
    def max_interest_rate(self, max_interest_rate):
        """Sets the max_interest_rate of this StrategyModel.


        :param max_interest_rate: The max_interest_rate of this StrategyModel.  # noqa: E501
        :type: float
        """

        self._max_interest_rate = max_interest_rate

    @property
    def max_ltv(self):
        """Gets the max_ltv of this StrategyModel.  # noqa: E501


        :return: The max_ltv of this StrategyModel.  # noqa: E501
        :rtype: float
        """
        return self._max_ltv

    @max_ltv.setter
    def max_ltv(self, max_ltv):
        """Sets the max_ltv of this StrategyModel.


        :param max_ltv: The max_ltv of this StrategyModel.  # noqa: E501
        :type: float
        """

        self._max_ltv = max_ltv

    @property
    def max_note_amount(self):
        """Gets the max_note_amount of this StrategyModel.  # noqa: E501


        :return: The max_note_amount of this StrategyModel.  # noqa: E501
        :rtype: float
        """
        return self._max_note_amount

    @max_note_amount.setter
    def max_note_amount(self, max_note_amount):
        """Sets the max_note_amount of this StrategyModel.


        :param max_note_amount: The max_note_amount of this StrategyModel.  # noqa: E501
        :type: float
        """

        self._max_note_amount = max_note_amount

    @property
    def max_remaining_loan_term_months(self):
        """Gets the max_remaining_loan_term_months of this StrategyModel.  # noqa: E501


        :return: The max_remaining_loan_term_months of this StrategyModel.  # noqa: E501
        :rtype: int
        """
        return self._max_remaining_loan_term_months

    @max_remaining_loan_term_months.setter
    def max_remaining_loan_term_months(self, max_remaining_loan_term_months):
        """Sets the max_remaining_loan_term_months of this StrategyModel.


        :param max_remaining_loan_term_months: The max_remaining_loan_term_months of this StrategyModel.  # noqa: E501
        :type: int
        """

        self._max_remaining_loan_term_months = max_remaining_loan_term_months

    @property
    def min_interest_rate(self):
        """Gets the min_interest_rate of this StrategyModel.  # noqa: E501


        :return: The min_interest_rate of this StrategyModel.  # noqa: E501
        :rtype: float
        """
        return self._min_interest_rate

    @min_interest_rate.setter
    def min_interest_rate(self, min_interest_rate):
        """Sets the min_interest_rate of this StrategyModel.


        :param min_interest_rate: The min_interest_rate of this StrategyModel.  # noqa: E501
        :type: float
        """

        self._min_interest_rate = min_interest_rate

    @property
    def min_remaining_loan_term_months(self):
        """Gets the min_remaining_loan_term_months of this StrategyModel.  # noqa: E501


        :return: The min_remaining_loan_term_months of this StrategyModel.  # noqa: E501
        :rtype: int
        """
        return self._min_remaining_loan_term_months

    @min_remaining_loan_term_months.setter
    def min_remaining_loan_term_months(self, min_remaining_loan_term_months):
        """Sets the min_remaining_loan_term_months of this StrategyModel.


        :param min_remaining_loan_term_months: The min_remaining_loan_term_months of this StrategyModel.  # noqa: E501
        :type: int
        """

        self._min_remaining_loan_term_months = min_remaining_loan_term_months

    @property
    def name(self):
        """Gets the name of this StrategyModel.  # noqa: E501


        :return: The name of this StrategyModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StrategyModel.


        :param name: The name of this StrategyModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def originators(self):
        """Gets the originators of this StrategyModel.  # noqa: E501


        :return: The originators of this StrategyModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._originators

    @originators.setter
    def originators(self, originators):
        """Sets the originators of this StrategyModel.


        :param originators: The originators of this StrategyModel.  # noqa: E501
        :type: list[int]
        """

        self._originators = originators

    @property
    def total_size(self):
        """Gets the total_size of this StrategyModel.  # noqa: E501


        :return: The total_size of this StrategyModel.  # noqa: E501
        :rtype: float
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this StrategyModel.


        :param total_size: The total_size of this StrategyModel.  # noqa: E501
        :type: float
        """

        self._total_size = total_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StrategyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StrategyModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
