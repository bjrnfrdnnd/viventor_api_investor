# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegistrationStep1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'company_registration_number': 'str',
        'type': 'str',
        'email': 'str',
        'phone_number': 'str',
        'language': 'str',
        'source_application': 'str',
        'password': 'PasswordModel',
        'captcha': 'Captcha',
        'referrer_code': 'str',
        'terms_accepted': 'bool',
        'privacy_policy_accepted': 'bool',
        'data_processing_accepted': 'bool',
        'affiliate_program_code': 'str',
        'affiliate_code': 'str',
        'affiliate_conversion_code': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'company_name': 'company_name',
        'company_registration_number': 'company_registration_number',
        'type': 'type',
        'email': 'email',
        'phone_number': 'phone_number',
        'language': 'language',
        'source_application': 'source_application',
        'password': 'password',
        'captcha': 'captcha',
        'referrer_code': 'referrer_code',
        'terms_accepted': 'terms_accepted',
        'privacy_policy_accepted': 'privacy_policy_accepted',
        'data_processing_accepted': 'data_processing_accepted',
        'affiliate_program_code': 'affiliate_program_code',
        'affiliate_code': 'affiliate_code',
        'affiliate_conversion_code': 'affiliate_conversion_code'
    }

    def __init__(self, first_name=None, last_name=None, company_name=None, company_registration_number=None, type=None, email=None, phone_number=None, language=None, source_application=None, password=None, captcha=None, referrer_code=None, terms_accepted=None, privacy_policy_accepted=None, data_processing_accepted=None, affiliate_program_code=None, affiliate_code=None, affiliate_conversion_code=None):  # noqa: E501
        """RegistrationStep1Model - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._company_registration_number = None
        self._type = None
        self._email = None
        self._phone_number = None
        self._language = None
        self._source_application = None
        self._password = None
        self._captcha = None
        self._referrer_code = None
        self._terms_accepted = None
        self._privacy_policy_accepted = None
        self._data_processing_accepted = None
        self._affiliate_program_code = None
        self._affiliate_code = None
        self._affiliate_conversion_code = None
        self.discriminator = None

        self.first_name = first_name
        self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        if company_registration_number is not None:
            self.company_registration_number = company_registration_number
        self.type = type
        self.email = email
        self.phone_number = phone_number
        if language is not None:
            self.language = language
        if source_application is not None:
            self.source_application = source_application
        self.password = password
        if captcha is not None:
            self.captcha = captcha
        if referrer_code is not None:
            self.referrer_code = referrer_code
        self.terms_accepted = terms_accepted
        self.privacy_policy_accepted = privacy_policy_accepted
        self.data_processing_accepted = data_processing_accepted
        if affiliate_program_code is not None:
            self.affiliate_program_code = affiliate_program_code
        if affiliate_code is not None:
            self.affiliate_code = affiliate_code
        if affiliate_conversion_code is not None:
            self.affiliate_conversion_code = affiliate_conversion_code

    @property
    def first_name(self):
        """Gets the first_name of this RegistrationStep1Model.  # noqa: E501


        :return: The first_name of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RegistrationStep1Model.


        :param first_name: The first_name of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this RegistrationStep1Model.  # noqa: E501


        :return: The last_name of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RegistrationStep1Model.


        :param last_name: The last_name of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this RegistrationStep1Model.  # noqa: E501


        :return: The company_name of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this RegistrationStep1Model.


        :param company_name: The company_name of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_registration_number(self):
        """Gets the company_registration_number of this RegistrationStep1Model.  # noqa: E501


        :return: The company_registration_number of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._company_registration_number

    @company_registration_number.setter
    def company_registration_number(self, company_registration_number):
        """Sets the company_registration_number of this RegistrationStep1Model.


        :param company_registration_number: The company_registration_number of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._company_registration_number = company_registration_number

    @property
    def type(self):
        """Gets the type of this RegistrationStep1Model.  # noqa: E501


        :return: The type of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegistrationStep1Model.


        :param type: The type of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["PERSON", "COMPANY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def email(self):
        """Gets the email of this RegistrationStep1Model.  # noqa: E501


        :return: The email of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegistrationStep1Model.


        :param email: The email of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this RegistrationStep1Model.  # noqa: E501


        :return: The phone_number of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this RegistrationStep1Model.


        :param phone_number: The phone_number of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def language(self):
        """Gets the language of this RegistrationStep1Model.  # noqa: E501


        :return: The language of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this RegistrationStep1Model.


        :param language: The language of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def source_application(self):
        """Gets the source_application of this RegistrationStep1Model.  # noqa: E501


        :return: The source_application of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._source_application

    @source_application.setter
    def source_application(self, source_application):
        """Sets the source_application of this RegistrationStep1Model.


        :param source_application: The source_application of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["VIVENTOR", "VIVENTOR_HOME"]  # noqa: E501
        if source_application not in allowed_values:
            raise ValueError(
                "Invalid value for `source_application` ({0}), must be one of {1}"  # noqa: E501
                .format(source_application, allowed_values)
            )

        self._source_application = source_application

    @property
    def password(self):
        """Gets the password of this RegistrationStep1Model.  # noqa: E501


        :return: The password of this RegistrationStep1Model.  # noqa: E501
        :rtype: PasswordModel
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistrationStep1Model.


        :param password: The password of this RegistrationStep1Model.  # noqa: E501
        :type: PasswordModel
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def captcha(self):
        """Gets the captcha of this RegistrationStep1Model.  # noqa: E501


        :return: The captcha of this RegistrationStep1Model.  # noqa: E501
        :rtype: Captcha
        """
        return self._captcha

    @captcha.setter
    def captcha(self, captcha):
        """Sets the captcha of this RegistrationStep1Model.


        :param captcha: The captcha of this RegistrationStep1Model.  # noqa: E501
        :type: Captcha
        """

        self._captcha = captcha

    @property
    def referrer_code(self):
        """Gets the referrer_code of this RegistrationStep1Model.  # noqa: E501


        :return: The referrer_code of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._referrer_code

    @referrer_code.setter
    def referrer_code(self, referrer_code):
        """Sets the referrer_code of this RegistrationStep1Model.


        :param referrer_code: The referrer_code of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._referrer_code = referrer_code

    @property
    def terms_accepted(self):
        """Gets the terms_accepted of this RegistrationStep1Model.  # noqa: E501


        :return: The terms_accepted of this RegistrationStep1Model.  # noqa: E501
        :rtype: bool
        """
        return self._terms_accepted

    @terms_accepted.setter
    def terms_accepted(self, terms_accepted):
        """Sets the terms_accepted of this RegistrationStep1Model.


        :param terms_accepted: The terms_accepted of this RegistrationStep1Model.  # noqa: E501
        :type: bool
        """
        if terms_accepted is None:
            raise ValueError("Invalid value for `terms_accepted`, must not be `None`")  # noqa: E501

        self._terms_accepted = terms_accepted

    @property
    def privacy_policy_accepted(self):
        """Gets the privacy_policy_accepted of this RegistrationStep1Model.  # noqa: E501


        :return: The privacy_policy_accepted of this RegistrationStep1Model.  # noqa: E501
        :rtype: bool
        """
        return self._privacy_policy_accepted

    @privacy_policy_accepted.setter
    def privacy_policy_accepted(self, privacy_policy_accepted):
        """Sets the privacy_policy_accepted of this RegistrationStep1Model.


        :param privacy_policy_accepted: The privacy_policy_accepted of this RegistrationStep1Model.  # noqa: E501
        :type: bool
        """
        if privacy_policy_accepted is None:
            raise ValueError("Invalid value for `privacy_policy_accepted`, must not be `None`")  # noqa: E501

        self._privacy_policy_accepted = privacy_policy_accepted

    @property
    def data_processing_accepted(self):
        """Gets the data_processing_accepted of this RegistrationStep1Model.  # noqa: E501


        :return: The data_processing_accepted of this RegistrationStep1Model.  # noqa: E501
        :rtype: bool
        """
        return self._data_processing_accepted

    @data_processing_accepted.setter
    def data_processing_accepted(self, data_processing_accepted):
        """Sets the data_processing_accepted of this RegistrationStep1Model.


        :param data_processing_accepted: The data_processing_accepted of this RegistrationStep1Model.  # noqa: E501
        :type: bool
        """
        if data_processing_accepted is None:
            raise ValueError("Invalid value for `data_processing_accepted`, must not be `None`")  # noqa: E501

        self._data_processing_accepted = data_processing_accepted

    @property
    def affiliate_program_code(self):
        """Gets the affiliate_program_code of this RegistrationStep1Model.  # noqa: E501


        :return: The affiliate_program_code of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_program_code

    @affiliate_program_code.setter
    def affiliate_program_code(self, affiliate_program_code):
        """Sets the affiliate_program_code of this RegistrationStep1Model.


        :param affiliate_program_code: The affiliate_program_code of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._affiliate_program_code = affiliate_program_code

    @property
    def affiliate_code(self):
        """Gets the affiliate_code of this RegistrationStep1Model.  # noqa: E501


        :return: The affiliate_code of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_code

    @affiliate_code.setter
    def affiliate_code(self, affiliate_code):
        """Sets the affiliate_code of this RegistrationStep1Model.


        :param affiliate_code: The affiliate_code of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._affiliate_code = affiliate_code

    @property
    def affiliate_conversion_code(self):
        """Gets the affiliate_conversion_code of this RegistrationStep1Model.  # noqa: E501


        :return: The affiliate_conversion_code of this RegistrationStep1Model.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_conversion_code

    @affiliate_conversion_code.setter
    def affiliate_conversion_code(self, affiliate_conversion_code):
        """Sets the affiliate_conversion_code of this RegistrationStep1Model.


        :param affiliate_conversion_code: The affiliate_conversion_code of this RegistrationStep1Model.  # noqa: E501
        :type: str
        """

        self._affiliate_conversion_code = affiliate_conversion_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistrationStep1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationStep1Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
