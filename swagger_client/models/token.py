# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Token(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authority': 'str',
        'last_login': 'datetime',
        'token': 'str',
        'token_expire_timestamp': 'int',
        'token_life_time': 'int'
    }

    attribute_map = {
        'authority': 'authority',
        'last_login': 'lastLogin',
        'token': 'token',
        'token_expire_timestamp': 'tokenExpireTimestamp',
        'token_life_time': 'tokenLifeTime'
    }

    def __init__(self, authority=None, last_login=None, token=None, token_expire_timestamp=None, token_life_time=None):  # noqa: E501
        """Token - a model defined in Swagger"""  # noqa: E501

        self._authority = None
        self._last_login = None
        self._token = None
        self._token_expire_timestamp = None
        self._token_life_time = None
        self.discriminator = None

        if authority is not None:
            self.authority = authority
        if last_login is not None:
            self.last_login = last_login
        if token is not None:
            self.token = token
        if token_expire_timestamp is not None:
            self.token_expire_timestamp = token_expire_timestamp
        if token_life_time is not None:
            self.token_life_time = token_life_time

    @property
    def authority(self):
        """Gets the authority of this Token.  # noqa: E501


        :return: The authority of this Token.  # noqa: E501
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this Token.


        :param authority: The authority of this Token.  # noqa: E501
        :type: str
        """

        self._authority = authority

    @property
    def last_login(self):
        """Gets the last_login of this Token.  # noqa: E501


        :return: The last_login of this Token.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Token.


        :param last_login: The last_login of this Token.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def token(self):
        """Gets the token of this Token.  # noqa: E501


        :return: The token of this Token.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Token.


        :param token: The token of this Token.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_expire_timestamp(self):
        """Gets the token_expire_timestamp of this Token.  # noqa: E501


        :return: The token_expire_timestamp of this Token.  # noqa: E501
        :rtype: int
        """
        return self._token_expire_timestamp

    @token_expire_timestamp.setter
    def token_expire_timestamp(self, token_expire_timestamp):
        """Sets the token_expire_timestamp of this Token.


        :param token_expire_timestamp: The token_expire_timestamp of this Token.  # noqa: E501
        :type: int
        """

        self._token_expire_timestamp = token_expire_timestamp

    @property
    def token_life_time(self):
        """Gets the token_life_time of this Token.  # noqa: E501


        :return: The token_life_time of this Token.  # noqa: E501
        :rtype: int
        """
        return self._token_life_time

    @token_life_time.setter
    def token_life_time(self, token_life_time):
        """Sets the token_life_time of this Token.


        :param token_life_time: The token_life_time of this Token.  # noqa: E501
        :type: int
        """

        self._token_life_time = token_life_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
