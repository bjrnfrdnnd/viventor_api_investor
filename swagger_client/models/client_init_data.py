# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientInitData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_areas': 'list[ActivityAreaDescription]',
        'countries': 'list[CountryModel]',
        'genders': 'list[GenderDescription]',
        'languages': 'list[LanguageDescription]'
    }

    attribute_map = {
        'activity_areas': 'activity_areas',
        'countries': 'countries',
        'genders': 'genders',
        'languages': 'languages'
    }

    def __init__(self, activity_areas=None, countries=None, genders=None, languages=None):  # noqa: E501
        """ClientInitData - a model defined in Swagger"""  # noqa: E501

        self._activity_areas = None
        self._countries = None
        self._genders = None
        self._languages = None
        self.discriminator = None

        if activity_areas is not None:
            self.activity_areas = activity_areas
        if countries is not None:
            self.countries = countries
        if genders is not None:
            self.genders = genders
        if languages is not None:
            self.languages = languages

    @property
    def activity_areas(self):
        """Gets the activity_areas of this ClientInitData.  # noqa: E501


        :return: The activity_areas of this ClientInitData.  # noqa: E501
        :rtype: list[ActivityAreaDescription]
        """
        return self._activity_areas

    @activity_areas.setter
    def activity_areas(self, activity_areas):
        """Sets the activity_areas of this ClientInitData.


        :param activity_areas: The activity_areas of this ClientInitData.  # noqa: E501
        :type: list[ActivityAreaDescription]
        """

        self._activity_areas = activity_areas

    @property
    def countries(self):
        """Gets the countries of this ClientInitData.  # noqa: E501


        :return: The countries of this ClientInitData.  # noqa: E501
        :rtype: list[CountryModel]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ClientInitData.


        :param countries: The countries of this ClientInitData.  # noqa: E501
        :type: list[CountryModel]
        """

        self._countries = countries

    @property
    def genders(self):
        """Gets the genders of this ClientInitData.  # noqa: E501


        :return: The genders of this ClientInitData.  # noqa: E501
        :rtype: list[GenderDescription]
        """
        return self._genders

    @genders.setter
    def genders(self, genders):
        """Sets the genders of this ClientInitData.


        :param genders: The genders of this ClientInitData.  # noqa: E501
        :type: list[GenderDescription]
        """

        self._genders = genders

    @property
    def languages(self):
        """Gets the languages of this ClientInitData.  # noqa: E501


        :return: The languages of this ClientInitData.  # noqa: E501
        :rtype: list[LanguageDescription]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ClientInitData.


        :param languages: The languages of this ClientInitData.  # noqa: E501
        :type: list[LanguageDescription]
        """

        self._languages = languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientInitData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientInitData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
