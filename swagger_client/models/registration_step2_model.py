# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegistrationStep2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_of_birth': 'date',
        'gender': 'str',
        'language': 'str',
        'country_code_of_residence': 'str',
        'address': 'str',
        'city': 'str',
        'postal_code': 'str',
        'activity_area': 'str',
        'occupation': 'str',
        'document_origin_country_code': 'str',
        'national_id_number': 'str',
        'politically_exposed_person': 'bool',
        'country_code_of_tax_residence': 'str',
        'taxpayer_id_number': 'str'
    }

    attribute_map = {
        'date_of_birth': 'date_of_birth',
        'gender': 'gender',
        'language': 'language',
        'country_code_of_residence': 'country_code_of_residence',
        'address': 'address',
        'city': 'city',
        'postal_code': 'postal_code',
        'activity_area': 'activity_area',
        'occupation': 'occupation',
        'document_origin_country_code': 'document_origin_country_code',
        'national_id_number': 'national_id_number',
        'politically_exposed_person': 'politically_exposed_person',
        'country_code_of_tax_residence': 'country_code_of_tax_residence',
        'taxpayer_id_number': 'taxpayer_id_number'
    }

    def __init__(self, date_of_birth=None, gender=None, language=None, country_code_of_residence=None, address=None, city=None, postal_code=None, activity_area=None, occupation=None, document_origin_country_code=None, national_id_number=None, politically_exposed_person=None, country_code_of_tax_residence=None, taxpayer_id_number=None):  # noqa: E501
        """RegistrationStep2Model - a model defined in Swagger"""  # noqa: E501

        self._date_of_birth = None
        self._gender = None
        self._language = None
        self._country_code_of_residence = None
        self._address = None
        self._city = None
        self._postal_code = None
        self._activity_area = None
        self._occupation = None
        self._document_origin_country_code = None
        self._national_id_number = None
        self._politically_exposed_person = None
        self._country_code_of_tax_residence = None
        self._taxpayer_id_number = None
        self.discriminator = None

        self.date_of_birth = date_of_birth
        self.gender = gender
        if language is not None:
            self.language = language
        self.country_code_of_residence = country_code_of_residence
        self.address = address
        self.city = city
        self.postal_code = postal_code
        self.activity_area = activity_area
        self.occupation = occupation
        self.document_origin_country_code = document_origin_country_code
        self.national_id_number = national_id_number
        self.politically_exposed_person = politically_exposed_person
        if country_code_of_tax_residence is not None:
            self.country_code_of_tax_residence = country_code_of_tax_residence
        if taxpayer_id_number is not None:
            self.taxpayer_id_number = taxpayer_id_number

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this RegistrationStep2Model.  # noqa: E501


        :return: The date_of_birth of this RegistrationStep2Model.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this RegistrationStep2Model.


        :param date_of_birth: The date_of_birth of this RegistrationStep2Model.  # noqa: E501
        :type: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """Gets the gender of this RegistrationStep2Model.  # noqa: E501


        :return: The gender of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this RegistrationStep2Model.


        :param gender: The gender of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501
        allowed_values = ["MALE", "FEMALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def language(self):
        """Gets the language of this RegistrationStep2Model.  # noqa: E501


        :return: The language of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this RegistrationStep2Model.


        :param language: The language of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def country_code_of_residence(self):
        """Gets the country_code_of_residence of this RegistrationStep2Model.  # noqa: E501


        :return: The country_code_of_residence of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._country_code_of_residence

    @country_code_of_residence.setter
    def country_code_of_residence(self, country_code_of_residence):
        """Sets the country_code_of_residence of this RegistrationStep2Model.


        :param country_code_of_residence: The country_code_of_residence of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if country_code_of_residence is None:
            raise ValueError("Invalid value for `country_code_of_residence`, must not be `None`")  # noqa: E501

        self._country_code_of_residence = country_code_of_residence

    @property
    def address(self):
        """Gets the address of this RegistrationStep2Model.  # noqa: E501


        :return: The address of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RegistrationStep2Model.


        :param address: The address of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def city(self):
        """Gets the city of this RegistrationStep2Model.  # noqa: E501


        :return: The city of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RegistrationStep2Model.


        :param city: The city of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this RegistrationStep2Model.  # noqa: E501


        :return: The postal_code of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this RegistrationStep2Model.


        :param postal_code: The postal_code of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def activity_area(self):
        """Gets the activity_area of this RegistrationStep2Model.  # noqa: E501


        :return: The activity_area of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._activity_area

    @activity_area.setter
    def activity_area(self, activity_area):
        """Sets the activity_area of this RegistrationStep2Model.


        :param activity_area: The activity_area of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if activity_area is None:
            raise ValueError("Invalid value for `activity_area`, must not be `None`")  # noqa: E501
        allowed_values = ["STUDENT", "PENSIONER", "UNEMPLOYED", "FIXED_TERM_CONTRACT", "TERMLESS_CONTRACT", "SELF_EMPLOYED", "OTHER"]  # noqa: E501
        if activity_area not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_area` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_area, allowed_values)
            )

        self._activity_area = activity_area

    @property
    def occupation(self):
        """Gets the occupation of this RegistrationStep2Model.  # noqa: E501


        :return: The occupation of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this RegistrationStep2Model.


        :param occupation: The occupation of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if occupation is None:
            raise ValueError("Invalid value for `occupation`, must not be `None`")  # noqa: E501

        self._occupation = occupation

    @property
    def document_origin_country_code(self):
        """Gets the document_origin_country_code of this RegistrationStep2Model.  # noqa: E501


        :return: The document_origin_country_code of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._document_origin_country_code

    @document_origin_country_code.setter
    def document_origin_country_code(self, document_origin_country_code):
        """Sets the document_origin_country_code of this RegistrationStep2Model.


        :param document_origin_country_code: The document_origin_country_code of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if document_origin_country_code is None:
            raise ValueError("Invalid value for `document_origin_country_code`, must not be `None`")  # noqa: E501

        self._document_origin_country_code = document_origin_country_code

    @property
    def national_id_number(self):
        """Gets the national_id_number of this RegistrationStep2Model.  # noqa: E501


        :return: The national_id_number of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._national_id_number

    @national_id_number.setter
    def national_id_number(self, national_id_number):
        """Sets the national_id_number of this RegistrationStep2Model.


        :param national_id_number: The national_id_number of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """
        if national_id_number is None:
            raise ValueError("Invalid value for `national_id_number`, must not be `None`")  # noqa: E501

        self._national_id_number = national_id_number

    @property
    def politically_exposed_person(self):
        """Gets the politically_exposed_person of this RegistrationStep2Model.  # noqa: E501


        :return: The politically_exposed_person of this RegistrationStep2Model.  # noqa: E501
        :rtype: bool
        """
        return self._politically_exposed_person

    @politically_exposed_person.setter
    def politically_exposed_person(self, politically_exposed_person):
        """Sets the politically_exposed_person of this RegistrationStep2Model.


        :param politically_exposed_person: The politically_exposed_person of this RegistrationStep2Model.  # noqa: E501
        :type: bool
        """
        if politically_exposed_person is None:
            raise ValueError("Invalid value for `politically_exposed_person`, must not be `None`")  # noqa: E501

        self._politically_exposed_person = politically_exposed_person

    @property
    def country_code_of_tax_residence(self):
        """Gets the country_code_of_tax_residence of this RegistrationStep2Model.  # noqa: E501


        :return: The country_code_of_tax_residence of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._country_code_of_tax_residence

    @country_code_of_tax_residence.setter
    def country_code_of_tax_residence(self, country_code_of_tax_residence):
        """Sets the country_code_of_tax_residence of this RegistrationStep2Model.


        :param country_code_of_tax_residence: The country_code_of_tax_residence of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """

        self._country_code_of_tax_residence = country_code_of_tax_residence

    @property
    def taxpayer_id_number(self):
        """Gets the taxpayer_id_number of this RegistrationStep2Model.  # noqa: E501


        :return: The taxpayer_id_number of this RegistrationStep2Model.  # noqa: E501
        :rtype: str
        """
        return self._taxpayer_id_number

    @taxpayer_id_number.setter
    def taxpayer_id_number(self, taxpayer_id_number):
        """Sets the taxpayer_id_number of this RegistrationStep2Model.


        :param taxpayer_id_number: The taxpayer_id_number of this RegistrationStep2Model.  # noqa: E501
        :type: str
        """

        self._taxpayer_id_number = taxpayer_id_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistrationStep2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationStep2Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
