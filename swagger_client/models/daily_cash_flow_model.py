# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DailyCashFlowModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'interest': 'float',
        'principal': 'float',
        'total': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'interest': 'interest',
        'principal': 'principal',
        'total': 'total'
    }

    def __init__(self, _date=None, interest=None, principal=None, total=None):  # noqa: E501
        """DailyCashFlowModel - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._interest = None
        self._principal = None
        self._total = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if interest is not None:
            self.interest = interest
        if principal is not None:
            self.principal = principal
        if total is not None:
            self.total = total

    @property
    def _date(self):
        """Gets the _date of this DailyCashFlowModel.  # noqa: E501


        :return: The _date of this DailyCashFlowModel.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DailyCashFlowModel.


        :param _date: The _date of this DailyCashFlowModel.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def interest(self):
        """Gets the interest of this DailyCashFlowModel.  # noqa: E501


        :return: The interest of this DailyCashFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this DailyCashFlowModel.


        :param interest: The interest of this DailyCashFlowModel.  # noqa: E501
        :type: float
        """

        self._interest = interest

    @property
    def principal(self):
        """Gets the principal of this DailyCashFlowModel.  # noqa: E501


        :return: The principal of this DailyCashFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this DailyCashFlowModel.


        :param principal: The principal of this DailyCashFlowModel.  # noqa: E501
        :type: float
        """

        self._principal = principal

    @property
    def total(self):
        """Gets the total of this DailyCashFlowModel.  # noqa: E501


        :return: The total of this DailyCashFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DailyCashFlowModel.


        :param total: The total of this DailyCashFlowModel.  # noqa: E501
        :type: float
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyCashFlowModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyCashFlowModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
