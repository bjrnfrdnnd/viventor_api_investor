# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoanConfigurationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'autoinvest': 'AutoInvestConfigurationModel',
        'filter': 'FilterConfigurationModel',
        'loan_types': 'list[LoanTypeDescriptionModel]',
        'sell_investment': 'SellInvestmentConfigurationModel'
    }

    attribute_map = {
        'autoinvest': 'autoinvest',
        'filter': 'filter',
        'loan_types': 'loan_types',
        'sell_investment': 'sell_investment'
    }

    def __init__(self, autoinvest=None, filter=None, loan_types=None, sell_investment=None):  # noqa: E501
        """LoanConfigurationModel - a model defined in Swagger"""  # noqa: E501

        self._autoinvest = None
        self._filter = None
        self._loan_types = None
        self._sell_investment = None
        self.discriminator = None

        if autoinvest is not None:
            self.autoinvest = autoinvest
        if filter is not None:
            self.filter = filter
        if loan_types is not None:
            self.loan_types = loan_types
        if sell_investment is not None:
            self.sell_investment = sell_investment

    @property
    def autoinvest(self):
        """Gets the autoinvest of this LoanConfigurationModel.  # noqa: E501


        :return: The autoinvest of this LoanConfigurationModel.  # noqa: E501
        :rtype: AutoInvestConfigurationModel
        """
        return self._autoinvest

    @autoinvest.setter
    def autoinvest(self, autoinvest):
        """Sets the autoinvest of this LoanConfigurationModel.


        :param autoinvest: The autoinvest of this LoanConfigurationModel.  # noqa: E501
        :type: AutoInvestConfigurationModel
        """

        self._autoinvest = autoinvest

    @property
    def filter(self):
        """Gets the filter of this LoanConfigurationModel.  # noqa: E501


        :return: The filter of this LoanConfigurationModel.  # noqa: E501
        :rtype: FilterConfigurationModel
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LoanConfigurationModel.


        :param filter: The filter of this LoanConfigurationModel.  # noqa: E501
        :type: FilterConfigurationModel
        """

        self._filter = filter

    @property
    def loan_types(self):
        """Gets the loan_types of this LoanConfigurationModel.  # noqa: E501


        :return: The loan_types of this LoanConfigurationModel.  # noqa: E501
        :rtype: list[LoanTypeDescriptionModel]
        """
        return self._loan_types

    @loan_types.setter
    def loan_types(self, loan_types):
        """Sets the loan_types of this LoanConfigurationModel.


        :param loan_types: The loan_types of this LoanConfigurationModel.  # noqa: E501
        :type: list[LoanTypeDescriptionModel]
        """

        self._loan_types = loan_types

    @property
    def sell_investment(self):
        """Gets the sell_investment of this LoanConfigurationModel.  # noqa: E501


        :return: The sell_investment of this LoanConfigurationModel.  # noqa: E501
        :rtype: SellInvestmentConfigurationModel
        """
        return self._sell_investment

    @sell_investment.setter
    def sell_investment(self, sell_investment):
        """Sets the sell_investment of this LoanConfigurationModel.


        :param sell_investment: The sell_investment of this LoanConfigurationModel.  # noqa: E501
        :type: SellInvestmentConfigurationModel
        """

        self._sell_investment = sell_investment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanConfigurationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanConfigurationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
