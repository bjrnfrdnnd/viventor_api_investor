# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoanPrimaryMarketModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'borrower_company': 'BorrowerCompanyModel',
        'borrower_consumer': 'BorrowerConsumerModel',
        'borrower_factoring': 'BorrowerFactoringModel',
        'collateral_generic': 'CollateralGenericModel',
        'collateral_invoice': 'CollateralInvoiceModel',
        'collateral_realty': 'CollateralRealtyModel',
        'loan_graph_data': 'LoanGraphDataModel',
        'loan_info': 'LoanInfoModel',
        'payments': 'list[PaymentModel]'
    }

    attribute_map = {
        'borrower_company': 'borrower_company',
        'borrower_consumer': 'borrower_consumer',
        'borrower_factoring': 'borrower_factoring',
        'collateral_generic': 'collateral_generic',
        'collateral_invoice': 'collateral_invoice',
        'collateral_realty': 'collateral_realty',
        'loan_graph_data': 'loan_graph_data',
        'loan_info': 'loan_info',
        'payments': 'payments'
    }

    def __init__(self, borrower_company=None, borrower_consumer=None, borrower_factoring=None, collateral_generic=None, collateral_invoice=None, collateral_realty=None, loan_graph_data=None, loan_info=None, payments=None):  # noqa: E501
        """LoanPrimaryMarketModel - a model defined in Swagger"""  # noqa: E501

        self._borrower_company = None
        self._borrower_consumer = None
        self._borrower_factoring = None
        self._collateral_generic = None
        self._collateral_invoice = None
        self._collateral_realty = None
        self._loan_graph_data = None
        self._loan_info = None
        self._payments = None
        self.discriminator = None

        if borrower_company is not None:
            self.borrower_company = borrower_company
        if borrower_consumer is not None:
            self.borrower_consumer = borrower_consumer
        if borrower_factoring is not None:
            self.borrower_factoring = borrower_factoring
        if collateral_generic is not None:
            self.collateral_generic = collateral_generic
        if collateral_invoice is not None:
            self.collateral_invoice = collateral_invoice
        if collateral_realty is not None:
            self.collateral_realty = collateral_realty
        if loan_graph_data is not None:
            self.loan_graph_data = loan_graph_data
        if loan_info is not None:
            self.loan_info = loan_info
        if payments is not None:
            self.payments = payments

    @property
    def borrower_company(self):
        """Gets the borrower_company of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The borrower_company of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: BorrowerCompanyModel
        """
        return self._borrower_company

    @borrower_company.setter
    def borrower_company(self, borrower_company):
        """Sets the borrower_company of this LoanPrimaryMarketModel.


        :param borrower_company: The borrower_company of this LoanPrimaryMarketModel.  # noqa: E501
        :type: BorrowerCompanyModel
        """

        self._borrower_company = borrower_company

    @property
    def borrower_consumer(self):
        """Gets the borrower_consumer of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The borrower_consumer of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: BorrowerConsumerModel
        """
        return self._borrower_consumer

    @borrower_consumer.setter
    def borrower_consumer(self, borrower_consumer):
        """Sets the borrower_consumer of this LoanPrimaryMarketModel.


        :param borrower_consumer: The borrower_consumer of this LoanPrimaryMarketModel.  # noqa: E501
        :type: BorrowerConsumerModel
        """

        self._borrower_consumer = borrower_consumer

    @property
    def borrower_factoring(self):
        """Gets the borrower_factoring of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The borrower_factoring of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: BorrowerFactoringModel
        """
        return self._borrower_factoring

    @borrower_factoring.setter
    def borrower_factoring(self, borrower_factoring):
        """Sets the borrower_factoring of this LoanPrimaryMarketModel.


        :param borrower_factoring: The borrower_factoring of this LoanPrimaryMarketModel.  # noqa: E501
        :type: BorrowerFactoringModel
        """

        self._borrower_factoring = borrower_factoring

    @property
    def collateral_generic(self):
        """Gets the collateral_generic of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The collateral_generic of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: CollateralGenericModel
        """
        return self._collateral_generic

    @collateral_generic.setter
    def collateral_generic(self, collateral_generic):
        """Sets the collateral_generic of this LoanPrimaryMarketModel.


        :param collateral_generic: The collateral_generic of this LoanPrimaryMarketModel.  # noqa: E501
        :type: CollateralGenericModel
        """

        self._collateral_generic = collateral_generic

    @property
    def collateral_invoice(self):
        """Gets the collateral_invoice of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The collateral_invoice of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: CollateralInvoiceModel
        """
        return self._collateral_invoice

    @collateral_invoice.setter
    def collateral_invoice(self, collateral_invoice):
        """Sets the collateral_invoice of this LoanPrimaryMarketModel.


        :param collateral_invoice: The collateral_invoice of this LoanPrimaryMarketModel.  # noqa: E501
        :type: CollateralInvoiceModel
        """

        self._collateral_invoice = collateral_invoice

    @property
    def collateral_realty(self):
        """Gets the collateral_realty of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The collateral_realty of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: CollateralRealtyModel
        """
        return self._collateral_realty

    @collateral_realty.setter
    def collateral_realty(self, collateral_realty):
        """Sets the collateral_realty of this LoanPrimaryMarketModel.


        :param collateral_realty: The collateral_realty of this LoanPrimaryMarketModel.  # noqa: E501
        :type: CollateralRealtyModel
        """

        self._collateral_realty = collateral_realty

    @property
    def loan_graph_data(self):
        """Gets the loan_graph_data of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The loan_graph_data of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: LoanGraphDataModel
        """
        return self._loan_graph_data

    @loan_graph_data.setter
    def loan_graph_data(self, loan_graph_data):
        """Sets the loan_graph_data of this LoanPrimaryMarketModel.


        :param loan_graph_data: The loan_graph_data of this LoanPrimaryMarketModel.  # noqa: E501
        :type: LoanGraphDataModel
        """

        self._loan_graph_data = loan_graph_data

    @property
    def loan_info(self):
        """Gets the loan_info of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The loan_info of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: LoanInfoModel
        """
        return self._loan_info

    @loan_info.setter
    def loan_info(self, loan_info):
        """Sets the loan_info of this LoanPrimaryMarketModel.


        :param loan_info: The loan_info of this LoanPrimaryMarketModel.  # noqa: E501
        :type: LoanInfoModel
        """

        self._loan_info = loan_info

    @property
    def payments(self):
        """Gets the payments of this LoanPrimaryMarketModel.  # noqa: E501


        :return: The payments of this LoanPrimaryMarketModel.  # noqa: E501
        :rtype: list[PaymentModel]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this LoanPrimaryMarketModel.


        :param payments: The payments of this LoanPrimaryMarketModel.  # noqa: E501
        :type: list[PaymentModel]
        """

        self._payments = payments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanPrimaryMarketModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanPrimaryMarketModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
