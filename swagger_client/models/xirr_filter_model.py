# coding: utf-8

"""
    Investor API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XirrFilterModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'originators': 'list[int]',
        'portfolios': 'list[int]'
    }

    attribute_map = {
        'originators': 'originators',
        'portfolios': 'portfolios'
    }

    def __init__(self, originators=None, portfolios=None):  # noqa: E501
        """XirrFilterModel - a model defined in Swagger"""  # noqa: E501

        self._originators = None
        self._portfolios = None
        self.discriminator = None

        if originators is not None:
            self.originators = originators
        if portfolios is not None:
            self.portfolios = portfolios

    @property
    def originators(self):
        """Gets the originators of this XirrFilterModel.  # noqa: E501

        List of originator IDs  # noqa: E501

        :return: The originators of this XirrFilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._originators

    @originators.setter
    def originators(self, originators):
        """Sets the originators of this XirrFilterModel.

        List of originator IDs  # noqa: E501

        :param originators: The originators of this XirrFilterModel.  # noqa: E501
        :type: list[int]
        """

        self._originators = originators

    @property
    def portfolios(self):
        """Gets the portfolios of this XirrFilterModel.  # noqa: E501

        List of portfolio IDs  # noqa: E501

        :return: The portfolios of this XirrFilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this XirrFilterModel.

        List of portfolio IDs  # noqa: E501

        :param portfolios: The portfolios of this XirrFilterModel.  # noqa: E501
        :type: list[int]
        """

        self._portfolios = portfolios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XirrFilterModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XirrFilterModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
